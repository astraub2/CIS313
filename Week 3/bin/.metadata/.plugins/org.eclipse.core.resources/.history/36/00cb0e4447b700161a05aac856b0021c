public class AVL<E extends Comparable<E>> {
    public Node<E> root;
    

    public AVL(){
        root = null;
        
    }

    public Node<E> getRoot(){
        return root;
    }
    
    public void insert(E data){
        boolean done = false;
        Node<E> temp = root;

        while(!done){
            if (root == null) {
                root = new Node<E>(data);
                done = true;
            } else if (temp.getData().compareTo(data) > 0){
                if (temp.getLeftChild() == null){
                    temp.setLeftChild(new Node<E>(data));
                    temp.getLeftChild().setParent(temp);
                  //unwind and update heights
                  //then balance
                    root=unwinder(temp);
                    
                    done = true;
                }
                
                temp = temp.getLeftChild();
                
            } else if (temp.getData().compareTo(data) <= 0){
                if (temp.getRightChild() == null){
                    temp.setRightChild(new Node<E>(data));
                    temp.getRightChild().setParent(temp);
                  //unwind and update heights
                  //then balance
                    root=unwinder(temp);
                    
                    done = true;
                }
                
                temp = temp.getRightChild();
                
            }
            if(root.getLeftChild()!=null)
            	root.getLeftChild().setParent(root);
        }
        
    }
    public Node<E> unwinder(Node<E> temp){
    	boolean done=false;
    	while (!done){
    	if(temp.getLeftChild()==null&&temp.getRightChild()==null)
    		temp.setHeight(1);
    	if (temp.getLeftChild() == null){
    		temp.setHeight(temp.getRightChild().getHeight()+1);
    		if(temp.isUnbalanced()){
    			temp=balance(temp);
    		}
    	}
    	else if (temp.getRightChild() == null){
    		//only one child
    		//parent +1
    		temp.setHeight(temp.getLeftChild().getHeight()+1);
    		if(temp.isUnbalanced()){
			temp=balance(temp);	
			    		}
    	}
    	else{
    		//there are two children now
    		temp.setHeight(max(temp.getLeftChild().getHeight(), temp.getRightChild().getHeight())+1);
    		System.out.println(temp.getData());
    		System.out.println(temp.getHeight());
			if(temp.isUnbalanced()){
				if(temp.getParent()!=null){
					temp=balance(temp);	
					
				}
			    			
			    		}
    	}
    	if(temp.getParent() != null)
    		temp=temp.getParent();
    	else
    		done=true;
    	}
    	
		
    	return temp;
    }

    
    private Node<E> balance(Node<E> n) {
    	
 
        if (n.isUnbalanced()) {
        	int factor = n.balance();
        	System.out.println(factor);
        	
		            if(n.getLeftChild() != null)
		            	if(n.getLeftChild().getLeftChild() != null){
		            		//left left case
		            		n=rotateRight(n);
		            		redoheight(n);
		            		}
		            	else
		            	{	
		            		n=rotateLeftRight(n);
		            		
		            	}
		            else 
		            	if(n.getRightChild().getRightChild() != null){
		            		n=rotateLeft(n);
		            		redoheight(n);
		            		
		            		}
		            	else
		            	{	n=rotateRightLeft(n);
		            	
		            	}
		            	
		        }
        	 
        
		return n;
        
    }


	private Node<E> rotateLeftRight(Node<E> z) {
		//System.out.println("rotating left right");
		Node<E> y = z.getLeftChild();
		Node<E> x=y.getRightChild();
		Node<E> temp = x.getLeftChild();
		
		x.setLeftChild(y);
		y.setRightChild(temp);
		y.setParent(z.getParent());
		if(z.getParent()!= null){
			
			if(z.getParent().getLeftChild() == z)
				z.getParent().setLeftChild(y);
			else
				z.getParent().setRightChild(y);
		}
		x.setParent(z);
		z.setLeftChild(x);
		z=rotateRight(z);
		redoheight(z);
		
		return z;
	}

	private Node<E> rotateRightLeft(Node<E> z) {
		//System.out.println("rotating right left");
		Node<E> y = z.getRightChild();
		Node<E> x=y.getLeftChild();
		Node<E> temp = x.getRightChild();
		
		x.setRightChild(y);
		y.setLeftChild(temp);
		x.setParent(z);
		z.setRightChild(x);
		if(z.getParent()!= null){
			
			if(z.getParent().getLeftChild() == z)
				z.getParent().setLeftChild(y);
			else
				z.getParent().setRightChild(y);
		}
		
		z=rotateLeft(z);
		redoheight(z);
		return z;
	}

	private int max(int height, int height2) {
		if (height>height2)
			return height;
		return height2;
	}
	private Node<E> rotateLeft(Node<E> z) {
		System.out.println("rotate left");
		Node<E> y = z.getRightChild();
		Node<E> x = y.getRightChild();
		//rotate
		
		Node<E> temp = y.getLeftChild();
		
		y.setLeftChild(z);
		if(z.getParent()!= null){
			
			if(z.getParent().getLeftChild() == z)
				z.getParent().setLeftChild(y);
			else
				z.getParent().setRightChild(y);
		}
		y.setParent(z.getParent());
		z.setRightChild(temp);
        return y;
}

	private Node<E> rotateRight(Node<E> z) {
		System.out.println("rotate right");
		Node<E> y = z.getLeftChild();
		Node<E> x = y.getLeftChild();
		//rotate
		Node<E> temp = y.getRightChild();
		
		y.setRightChild(z);
		y.setParent(z.getParent());
		if(z.getParent()!= null){
			
			if(z.getParent().getLeftChild() == z)
				z.getParent().setLeftChild(y);
			else
				z.getParent().setRightChild(y);
		}
		z.setLeftChild(temp);
		
		return y;
	}


private void redoheight(Node<E> y) {
		Node<E> x = y.getLeftChild();
		Node<E> z = y.getRightChild();
		
		if (x.getRightChild() != null && x.getLeftChild() != null)
			x.setHeight(( max(x.getLeftChild().getHeight(),x.getRightChild().getHeight() ) + 1));
		else{
			if(x.getRightChild()!=null)
				x.setHeight(x.getRightChild().getHeight()+1);
			else if(x.getLeftChild()!=null)
				x.setHeight(x.getLeftChild().getHeight()+1);
			else
				x.setHeight(1);
		}
		if (z.getRightChild()!=null && z.getLeftChild()!= null)
			z.setHeight(( max(z.getLeftChild().getHeight(),z.getRightChild().getHeight() ) + 1));
		else
			{if(z.getRightChild()!=null)
				z.setHeight(z.getRightChild().getHeight()+1);
			else if(z.getLeftChild()!=null)
				z.setHeight(z.getLeftChild().getHeight()+1);
			else
				z.setHeight(1);
			}
		
		y.setHeight(max(z.getHeight(), x.getHeight())+1);
		
	}

		
	public Node<Integer> search(E data){
		Node<E> value = searcher(data);
		return (Node<Integer>) value;
	}
	
	

	public Node <E> searcher(E data){
	        boolean done = false;
	        Node<E> temp = root;


	        while(!done){
	            if(temp!=null) {           
	            if(temp.getData().compareTo(data) == 0){
	                done = true;
	            } else if (temp.getData().compareTo(data) > 0){
	                temp = temp.getLeftChild();
	            } else if (temp.getData().compareTo(data) < 0){
	                temp = temp.getRightChild();
	            }
	            }
	            else
	            	return null;
	        }
	        return (Node<E>) temp;
	    }
    

    public void delete(E data){
            Node<E> temp = (Node<E>) search(data);
            if (temp == null){
                return;
            }
            Node<E> replacement = new Node(null);

            boolean isRight;
            boolean isLeft;
            boolean isRoot;

            boolean hasChildren;
            boolean hasLeft;
            boolean hasRight;
            boolean hasBoth;

            // Find out if the node to be deleted is the root or if it is a left/right child
            if (temp == root){
                isRoot = true;
                isLeft = false;
                isRight = false;
            } else if (temp == temp.getParent().getLeftChild()){
                isRoot = false;
                isLeft = true;
                isRight = false;
            } else {
                isRoot = false;
                isLeft = false;
                isRight = true;
            }

            // Find out if the node to be deleted has children
            // If it does, find out if it has a Right/Left Child or both
            if (temp.getLeftChild() == null && temp.getRightChild() == null){
                hasChildren = false;
                hasBoth = false;
                hasLeft = false;
                hasRight = false;
            } else if (temp.getLeftChild() != null && temp.getRightChild() != null){
                hasChildren = true;
                hasBoth = true;
                hasLeft = true;
                hasRight = true;
            } else if (temp.getLeftChild() == null){
                hasChildren = true;
                hasBoth = false;
                hasRight = true;
                hasLeft = false;
            } else {
                hasChildren = true;
                hasBoth = false;
                hasRight = false;
                hasLeft = true;
            }

            // Seperate cases if the node to be deleted is the root of the tree
            if (isRoot){
                // Seperate cases depending on the number of children the node to be deleted has
                if (!hasChildren){
                    root = replacement;
                } else if (hasBoth){
                    replacement = getMin(temp.getRightChild());
                    if (replacement == temp.getRightChild()){
                        replacement.setLeftChild(temp.getLeftChild());
                        //update height
                        replacement.setParent(temp.getParent());
                      //update height
                        replacement.getLeftChild().setParent(replacement);
                      
                        root = replacement;
                        
                    } else {
                        if (replacement.getParent().getLeftChild() == replacement){
                        	//deleted here
                            replacement.getParent().setLeftChild(null);
							
                        } else if (replacement.getParent().getRightChild() == replacement){
                        	//deleted here
                            replacement.getParent().setRightChild(null);
                            
                        }
                        replacement.setParent(temp.getParent());
                        replacement.setLeftChild(temp.getLeftChild());
                        replacement.setRightChild(temp.getRightChild());
                        temp.getLeftChild().setParent(replacement);
                        temp.getRightChild().setParent(replacement);
                        root = replacement;
                        unwinder(root);
                    }

                } else if (hasLeft && !hasRight){
                    temp.getLeftChild().setParent(null);
                    root = temp.getLeftChild();
                  //update root height --
                } else if (hasRight && !hasLeft) {
                    temp.getRightChild().setParent(null);
                    root = temp.getRightChild();
                  //update root height --
                }
            } else {
                // This is the case where it isn't the root node
                if (!hasChildren){
                    if (isLeft){
                        temp.getParent().setLeftChild(null);
                      
                    } else if (isRight){
                        temp.getParent().setRightChild(null);
                    }
                } else if (hasBoth){
                    replacement = getMin(temp.getRightChild());
                    if (replacement == temp.getRightChild()){
                        replacement.setLeftChild(temp.getLeftChild());
                        replacement.setParent(temp.getParent());
                        replacement.getLeftChild().setParent(replacement);
                    } else {
                        if (replacement.getParent().getLeftChild() == replacement){
                            replacement.getParent().setLeftChild(null);
                        } else if (replacement.getParent().getRightChild() == replacement){
                            replacement.getParent().setRightChild(null);
                        }
                        replacement.setParent(temp.getParent());
                        replacement.setLeftChild(temp.getLeftChild());
                        replacement.setRightChild(temp.getRightChild());
                        temp.getLeftChild().setParent(replacement);
                        temp.getRightChild().setParent(replacement);
                    }
                    if(isLeft){
                        temp.getParent().setLeftChild(replacement);
                    } else if (isRight){
                        temp.getParent().setRightChild(replacement);
                    }

                } else if (hasLeft && !hasRight){
                    temp.getLeftChild().setParent(temp.getParent());
                    temp.getParent().setLeftChild(temp.getLeftChild());
                } else if (hasRight && !hasLeft) {
                    temp.getRightChild().setParent(temp.getParent());
                    temp.getParent().setRightChild(temp.getRightChild());
                }
            }
           checkup(root);
        } 
    public void checkup(Node<E> r){
    	 if (r != null)
         {
             if(r.isUnbalanced())
            	 unwinder(r);
             
             checkup(r.getLeftChild());             
             checkup(r.getRightChild());
         }
         }
   public boolean isAVL() {
    		 return isAVLer(root);
    }
    public boolean isAVLer(Node<E> root){
    	if (root != null)
        {
            if(root.isUnbalanced())
            	return false;
            
            isAVLer(root.getLeftChild());             
            isAVLer(root.getRightChild());
        }
		return true;
    	
    }
    public void traverse() {
        // Preform a preorder traversal of the tree
    	preorder(root);
    }
   
    private void preorder(Node<E> r)
    {
    	
        if (r != null)
        {
            System.out.print(r.getData() +" ");
            preorder(r.getLeftChild());             
            preorder(r.getRightChild());
        }
    }
    public Node<E> getMin(Node<E> top){
        boolean done = false;
        Node<E> temp = top;
        while(!done) {
            if (temp.getLeftChild() == null) {
                done = true;
            } else {
                temp = temp.getLeftChild();
            }
        }
        return temp;
    }
    public Node<E> getMax(Node<E> top){
        boolean done = false;
        Node<E> temp = top;
        while(!done) {
            if (temp.getRightChild() == null) {
                done = true;
            } else {
                temp = temp.getRightChild();
            }
        }
        return temp;
    }

    
    // HINT: You may want to create extra methods such as trinode reorder, or update heights, etc
}
